@page "/"
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<h1>Maze Game</h1>
Welcome to the maze game!
<br>

@if (!gameStarted)
{
    <br>
    <div>
        <form @onsubmit="startGame">
            <input @bind="mazeSeed" placeholder="Enter the Map Seed/Name" />
            <input type="submit" value="Confirm" />
        </form>
    </div>}

else
{
    <br>
    <button @onclick="joinGame">Join the Normal Maze</button>
    <button @onclick="joinGameTwisty">Join the Twisty Maze</button>
}

<p style="color:red;">@invalidName</p>

<br>
<br>
<h4>High Scores:</h4>
<table border="1" style="color: rgb(34, 31, 43); text-align:center;">
    <tr>
        <th>Maze Type</th>
        <th>Player Name</th>
        <th>Total Moves</th>
        <th>TimeStamp</th>

    </tr>
    @foreach (var highscore in IDataStore.Instance.GetHighScores())

    {
        <tr>
            <td>
                @highscore.MazeType
            </td>
            <td>@highscore.PlayerName</td>
            <td>@highscore.TotalMoves</td>
            <td>@highscore.Timestamp</td>

        </tr>
    }
</table>



@code {
    public string mazeSeed;
    private string? invalidName;
    public static bool gameStarted;

    void startGame()
    {
        if (!string.IsNullOrWhiteSpace(mazeSeed))
        {
            Console.WriteLine($"Starting game with seed: {mazeSeed}");
            MazeGame.Instance.StartNewMaze(mazeSeed);
            MazeGame.TwistyInstance.StartNewTwistyMaze(mazeSeed);
            invalidName = null;
            gameStarted = true;
            StateHasChanged();
        }
        else
        {
            gameStarted = false;
            invalidName = "Please enter a valid name";
            mazeSeed = null;
            StateHasChanged();
        }
    }
    void joinGame()
    {
        Navigation.NavigateTo("/GamePage");
    }
    void joinGameTwisty()
    {
        Navigation.NavigateTo("/GamePageTwisty");
    }
}